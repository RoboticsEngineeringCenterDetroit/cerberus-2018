// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5577.GearsBot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import org.usfirst.frc5577.GearsBot.subsystems.WheelEncoder;

import com.ctre.phoenix.motorcontrol.can.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static SpeedController driveTrainRightMotor;
    public static SpeedController driveTrainLeftMotor;
    public static DifferentialDrive driveTrainRobotDrive;
    public static TalonSRX shooterMotor;
    public static TalonSRX blenderMotor;
    public static TalonSRX intakeMotor;
    
    public static TalonSRX climberMotor;
    public static Servo servo;
    public static Compressor compressor;
    public static DoubleSolenoid gas_system;
    public static Encoder leftWheelEncoder;
    public static Encoder rightWheelEncoder;
    
 static void init() {
    	
        driveTrainLeftMotor = new Spark(0);
        LiveWindow.addActuator("Drive Train", "Left Motor", (Spark) driveTrainLeftMotor);
        
        driveTrainRightMotor = new Spark(1);
        LiveWindow.addActuator("Drive Train", "Right Motor", (Spark) driveTrainRightMotor);
        
        driveTrainRobotDrive = new DifferentialDrive(driveTrainLeftMotor, driveTrainRightMotor);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setMaxOutput(1.0);
        
        blenderMotor = new TalonSRX(3);
        
        intakeMotor = new TalonSRX(2);
        
        climberMotor = new TalonSRX(1);
        
        shooterMotor = new TalonSRX(4);
        
        servo = new Servo(2);
        
        compressor = new Compressor();
        compressor.setClosedLoopControl(true);
        
        gas_system = new DoubleSolenoid(0,1);
        gas_system.set(DoubleSolenoid.Value.kOff);
        
        leftWheelEncoder = new Encoder(2, 3, false, Encoder.EncodingType.k4X);
//        leftWheelEncoder = new Encoder(2, 3);
        leftWheelEncoder.setDistancePerPulse(.147);
        leftWheelEncoder.setSamplesToAverage(10);
        leftWheelEncoder.reset();
        rightWheelEncoder = new Encoder(0, 1, true, Encoder.EncodingType.k4X);
//        rightWheelEncoder = new Encoder(0, 1);
        rightWheelEncoder.setDistancePerPulse (.147);
        rightWheelEncoder.setSamplesToAverage(10);
        rightWheelEncoder.reset();
    }
}
